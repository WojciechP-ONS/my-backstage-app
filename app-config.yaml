app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: ONS 

permission:
  enabled: true

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  auth:
    keys:
      - secret: RqRxCsdjxYQvMAPU8UbzQJL5IfqOl0Bm
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src: 
      # "'self'" and 'data' are from the backstage default but must be set since img-src is overriden
      - "'self'"
      - 'data:'
      # Allow your Jira instance for @roadiehq/backstage-plugin-jira
      - 'https://akira.atlassian.net'
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: pg
    connection:
      host: localhost
      port: 5432
      user: postgres
      password: password
    # https://node-postgres.com/features/ssl
    # ssl:
    #   host is only needed if the connection name differs from the certificate name.
    #   This is for example the case with CloudSQL.
    #   host: servername in the certificate
    #   ca:
    #     $file: <file-path>/server.pem
    #   key:
    #     $file: <file-path>/client.key
    #   cert:
    #     $file: <file-path>/client-cert.pem
    # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      token: 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
      apps:
        - $include: backstage-app-credentials.yaml
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  '/jira/api':
    target: 'https://akira.atlassian.net'
    headers:
      Authorization: Basic YWtpcmFqbGFuZUBnbWFpbC5jb206QVRBVFQzeEZmR0YwLWJQTERfdThwdEJvTndlVlpDSEliNGdPaXUxMkpGTkwxbGVxYzVLY3hkWHNWRlhUSDVHTFRhaFhzdzI2U1JFRGowaXZIVVZBOEpTT3Z1WWlMY21PSUJiM1pYbFlvZmRVN0FxWDlmSzhadzk4dk1hWHpkNV9fTXRoMENWbmJLeHp2Y2dOR2JqME03WTZzdVI3aUd2TVVQdlprZjhCS0xvYlpuZzNnQ0hzZ2NJPTZGNTI3RjVB
      Accept: 'application/json'
      Content-Type: 'application/json'
      X-Atlassian-Token: 'nocheck'
      User-Agent: "backstage-poc/0"


# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.


auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    github:
      development:
        clientId: 5afea160b3875585c8ef
        clientSecret: 1965ac8d3230870384b3a141645633ced1e9f246
    microsoft:
      development:
        clientId: f90b0745-8673-4f0d-a32d-ea5b4ac2b7e0
        clientSecret: xKw8Q~y3-eEHLfsy5hUb8g~aPOf~pFSU~z4EgaR2
        tenantId: 52bd978e-e003-42d9-8854-ce25d8f27b66
        # domainHint: 52bd978e-e003-42d9-8854-ce25d8f27b66

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  providers:
    github:
      providerId:
        organization: 'backstage-dummy-org'
        schedule: # optional; same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 1 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Template]
  locations:
    $include: ./app-static-config.yaml
    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    # Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
